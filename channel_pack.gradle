import javax.crypto.Cipher
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.nio.file.Files
import java.nio.file.Paths
import java.security.MessageDigest
import java.util.concurrent.TimeUnit
import java.util.zip.ZipEntry
import java.util.zip.ZipFile

/**
// 阿里云映射的maven仓库地址
maven { url 'https://maven.aliyun.com/repository/public' }
maven { url 'https://maven.aliyun.com/repository/central' }
maven { url 'https://maven.aliyun.com/repository/google' }
maven { url 'https://maven.aliyun.com/repository/jcenter' }
maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
maven { url 'https://maven.aliyun.com/repository/releases' }
maven { url 'https://adcolony.bintray.com/AdColony' }
maven { url 'https://jitpack.io' }
*/

/*
    version : 1.0.5
    update : 增加apk对齐功能
 */


static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

@groovy.transform.Field
Map<String, Map<String, String>> channelFileMap = new HashMap<String, Map<String, String>>()

class Global {
    static def sAxmlEditorFilePath = null
    static def s7ZipCommandPath = null
    static def sAaptFile = null
    static def sZipAlignFile = null
    static def sJarSignerFile = null
    static def sApkSignerFile = null
}

def getChannelPackVersion() {
    return "1.0.5"
}

def getAxmlGroupId() {
    return "cn.wjdiankong"
}

def getAxmlArtifactId() {
    return "axmleditor"
}

def getAxmlVersion() {
    return "1.0.4"
}

def getAxmlImplementation() {
    return getAxmlGroupId() + ":" + getAxmlArtifactId() + ":" + getAxmlVersion()
}

def getAxmlFileName() {
    return getAxmlArtifactId() + "-" + getAxmlVersion() + ".jar"
}

afterEvaluate {
    println ":${project.name}:ChannelPackVersion [" + getChannelPackVersion() + "]"
    project.configurations.compileOnly.setCanBeResolved(true)
    project.configurations.api.setCanBeResolved(true)
    project.dependencies.add("compileOnly", getAxmlImplementation())
// Windows
    if (project.android.productFlavors.size() > 0) {// 如果有产品风味
        project.android.productFlavors.each { flavor ->
            def productFlavor = toUpperCaseFirstOne(flavor.name)
            String assembleTaskName = String.format("assemble%sRelease", productFlavor)
            def aTask = project.tasks.findByName(assembleTaskName);
            if (aTask != null) {
                aTask.doLast {
                    generateMulChannel(flavor)
                    openReleaseDir(flavor.name)
                }
            }
        }
    } else {
        def aTask = project.tasks.findByName("assembleRelease");
        if (aTask != null) {
            aTask.doLast {
                generateMulChannel(null)
                openReleaseDir(null)
            }
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant != null && variant.buildType.name == 'release') {
                def flavorObj = variant.productFlavors[0]
                parseChannelConfig(flavorObj, outputFile)
                def channelFileName = getChannelFileName(flavorObj != null ? flavorObj.name : null)
                println ":${project.name}:applicationVariant [" + (flavorObj != null ? flavorObj.name : "official") + "] Channel FileName : " + channelFileName
            }
        }
    }
}

/**
 * 生成多渠道包
 * @param flavor
 * @return
 */
def generateMulChannel(flavor) {
    Global.sAxmlEditorFilePath = getAXMLEditJarFile()
    Global.s7ZipCommandPath = get7ZipCmd()
    Global.sAaptFile = getAaptFile()
    Global.sZipAlignFile = getZipAlignFile()
    Global.sJarSignerFile = getJarSigner()
    Global.sApkSignerFile = getApkSigner()
    if (Global.sAaptFile == null) {
        println "> Task :${project.name}:generateMulChannel [aapt file is not exist, stop generate multiple channel task]"
        return
    }
    if (Global.sJarSignerFile == null) {
        println "> Task :${project.name}:generateMulChannel [jarsigner file is not exist, stop generate multiple channel task]"
        return
    }

    def flavorName = "official"
    def channels = android.defaultConfig.ext.has("app_channels") ? android.defaultConfig.ext.app_channels : null
    def channelFileName = android.defaultConfig.ext.has("channel_file_name") ? android.defaultConfig.ext.channel_file_name : null
    def channelKey = android.defaultConfig.ext.has("channel_key") ? android.defaultConfig.ext.channel_key : null
    def channelCfg = android.defaultConfig.ext.has("channel_cfg") ? android.defaultConfig.ext.channel_cfg : null
    if (flavor != null) {
        flavorName = flavor.name
        if (flavor.ext != null && flavor.ext.has("app_channels") && flavor.ext.app_channels != null) {
            channels = flavor.ext.app_channels
        }
        if (flavor.ext != null && flavor.ext.has("channel_file_name") && flavor.ext.channel_file_name != null) {
            channelFileName = flavor.ext.channel_file_name
        }
        if (flavor.ext != null && flavor.ext.has("channel_key") && flavor.ext.channel_key != null) {
            channelKey = flavor.ext.channel_key
        }
        if (flavor.ext != null && flavor.ext.has("channel_cfg") && flavor.ext.channel_cfg != null) {
            channelCfg = flavor.ext.channel_cfg
        }
    }
    if (channels == null || channels.isEmpty()) {
        System.err.println ":${project.name}:generateMulChannel [" + flavorName + "] Channel Config is Empty"
        return
    }
    def channels_files = channelFileMap[flavorName]
    if (channels_files == null || channels_files.isEmpty()) {
        System.err.println ":${project.name}:generateMulChannel [" + flavorName + "] Channel Files is Empty"
        return
    }
    // 循环检测源文件是否存在，检测时间为5s内
    def basePackage = channels_files["base_package"]
    if (basePackage == null) {
        System.err.println ":${project.name}:generateMulChannel [" + flavorName + "] Base Package is Null"
        return
    }
    def startTime = System.currentTimeMillis()
    for (; ;) {
        File baseApk = new File(basePackage)
        def exist = baseApk.exists();
        if (!exist && System.currentTimeMillis() <= startTime + 5000) {
            sleep(1000)
        } else {
            break;
        }
    }
    File sourceFile = new File(basePackage)
    if (!sourceFile.exists()) {
        System.err.println ":${project.name}:generateMulChannel [" + flavorName + "] Base Package is not exist"
        return
    }
    String releaseDir = new File(basePackage).getParent()
    println ":${project.name}:generateMulChannel [" + flavorName + "] Channel " + channels
    println "**************************************************************************************************************************************"
    println ":${project.name}:generateMulChannel [" + flavorName + "] Channel >>>>>>>>> Generate Multiple Channel ApkFile Start <<<<<<<<<"
    channels.each {
        copyChannelApkFile(basePackage, channels_files[it])
        appendChannelsFile(basePackage, it, channels_files[it], releaseDir, flavorName, channelFileName)
        modifyAndroidManifest(basePackage, it, channels_files[it], releaseDir, flavorName, channelKey, channelCfg)
        signChannelApkFile(flavorName, channels_files[it], it)
        println ":${project.name}:generateMulChannel [" + flavorName + "][" + it + "] ***********************************************************\n"
    }
    println ":${project.name}:generateMulChannel [" + flavorName + "] Channel >>>>>>>>> Generate Multiple Channel ApkFile Complete <<<<<<<<<"
    println "**************************************************************************************************************************************"
}

/**
 * 获取applicationId
 * @param flavor
 * @return
 */
def getApplicationId(flavor) {
    if (flavor == null || flavor.trim().length() == 0) {
        return project.android.defaultConfig.applicationId
    }
    def productFlavor = project.android.productFlavors[flavor]
    if (productFlavor.applicationId == null) {
        return project.android.defaultConfig.applicationId
    }
    return productFlavor.applicationId
}

/**
 * 获取存放channel的文件名称，生成方式为包名的MD5取前八位
 * @param flavor
 * @return
 */
def getChannelFileName(flavor) {
    def appId = getApplicationId(flavor)
    println ":${project.name}:getChannelFileName [" + (flavor != null ? flavor : "official") + "] Package Name : " + appId
    if (appId == null || appId.trim().length() == 0) {
        return null
    }
    def pkgMd5 = AesManager.string2MD5(appId)
    println ":${project.name}:getChannelFileName [" + (flavor != null ? flavor : "official") + "] Package MD5 : " + pkgMd5
    if (pkgMd5 == null || pkgMd5.trim().length() == 0) {
        return null
    }
    if (pkgMd5.length() < 8) {
        return null
    }
    pkgMd5 = pkgMd5.toLowerCase(Locale.default)
    def fileName = pkgMd5.substring(0, 8)
    return fileName + ".cnl"
}

/**
 * 复制渠道apk文件
 * @param baseApk
 * @param channelApk
 * @return
 */
def copyChannelApkFile(baseApk, channelApk) {
    File channelApkFile = new File(channelApk)
    if (channelApkFile.exists()) {
        channelApkFile.delete()
    }
    Files.copy(Paths.get(baseApk), Paths.get(channelApk))
}

/**
 * 增加渠道文件到assets目录，渠道文件名称为assets/product_channel_cfg
 * @param baseApk
 * @param channel
 * @param channelApk
 * @param releaseDir
 * @param flavorName
 * @param channelFileName
 * @return
 */
def appendChannelsFile(baseApk, channel, channelApk, releaseDir, flavorName, channelFileName) {
    println "\n:${project.name}:appendChannelsFile [" + flavorName + "][" + channel + "] >>>>>>>>> Append Channels File Start <<<<<<<<<"
    println ":${project.name}:appendChannelsFile [" + flavorName + "][" + channel + "] BaseApk [" + baseApk + "]"
    println ":${project.name}:appendChannelsFile [" + flavorName + "][" + channel + "] Channel [" + new File(channelApk).getName() + "]"

    // 创建渠道文件
    File tempAssets = new File(releaseDir, "assets")
    if (!tempAssets.exists()) {
        tempAssets.mkdirs()
    }
    if (channelFileName == null) {
        channelFileName = "product_channel_cfg"
    }
    File channelFile = new File(tempAssets, channelFileName)

    // 给渠道文件写入渠道号
    FileWriter writer = new FileWriter(channelFile, false)
    writer.write(channel)
    writer.close()

    // 添加渠道文件到assets目录
    def cwd = new File(baseApk).getParent()
    appendFilesIntoApk(cwd, channelApk, ["assets/" + channelFileName])
    // 删除临时渠道文件
    channelFile.delete()
    tempAssets.delete()
    println ":${project.name}:appendChannelsFile [" + flavorName + "][" + channel + "] >>>>>>>>> Append Channels File Complete <<<<<<<<<\n"
}

/**
 * 修改AndroidManifest文件
 * @param baseApk
 * @param channel
 * @param channelApk
 * @param releaseDir
 * @param flavorName
 * @param channelKey
 * @param channelCfg
 * @return
 */
def modifyAndroidManifest(baseApk, channel, channelApk, releaseDir, flavorName, channelKey, channelCfg) {
    println "\n:${project.name}:modifyAndroidManifest [" + flavorName + "][" + channel + "] >>>>>>>>> Modify AndroidManifest Start <<<<<<<<<"
    if (needModifyAndroidManifest(channelKey, channelCfg, channel)) {
        println ":${project.name}:modifyAndroidManifest [" + flavorName + "][" + channel + "] BaseApk [" + baseApk + "]"
        println ":${project.name}:modifyAndroidManifest [" + flavorName + "][" + channel + "] Channel [" + new File(channelApk).getName() + "]"
        def aXMLEditorJarFile = Global.sAxmlEditorFilePath
        if (aXMLEditorJarFile == null || !new File(aXMLEditorJarFile).exists()) {
            System.err.println ":${project.name}:modifyAndroidManifest [" + flavorName + "][" + channel + "] AXMLEditor.jar [" + aXMLEditorJarFile + "] is not exists"
            return
        }

        println ":${project.name}:modifyAndroidManifest [" + flavorName + "][" + channel + "] AXMLJar [" + aXMLEditorJarFile + "]"
        File xmlFile = new File(releaseDir, "AndroidManifest.xml")
        println ":${project.name}:modifyAndroidManifest [" + flavorName + "][" + channel + "] CopyXml [" + xmlFile.getAbsolutePath() + "]"
        // 把AndroidManifest文件从apk中复制出来
        copyManifestFromApk(baseApk, flavorName, "AndroidManifest.xml", xmlFile.getAbsolutePath(), channel)

        /////////////////////////////////////////////////////////
        if ((channelKey instanceof String && channelKey.trim().length() > 0) || (channelKey instanceof List && channelKey.size() > 0)) {
            appendMetaDataToAXml(channel, releaseDir, flavorName, channelKey, xmlFile, aXMLEditorJarFile)
        }
        // 修改label和icon
        if (channelCfg instanceof Map && !channelCfg.isEmpty()) {
            modifyAppAttribution(channel, channelApk, flavorName, channelCfg, xmlFile, aXMLEditorJarFile)
        }
        /////////////////////////////////////////////////////////

        // 删除AndroidManifest.xml文件
        deleteFilesFromApk(channelApk, [xmlFile.getName()])

        // 添加AndroidManifest.xml到apk文件
        def cwd = new File(baseApk).getParent()
        appendFilesIntoApk(cwd, channelApk, [xmlFile.getName()])
        xmlFile.delete()
    }
    println ":${project.name}:modifyAndroidManifest [" + flavorName + "][" + channel + "] >>>>>>>>> Modify AndroidManifest Complete <<<<<<<<<\n"
}

/**
 * 判断是否需要修改AndroidManifest
 * @param channelKey
 * @param channelCfg
 * @param channel
 * @return
 */
def needModifyAndroidManifest(channelKey, channelCfg, channel) {
    if ((channelKey instanceof String && channelKey.trim().length() > 0) || (channelKey instanceof List && channelKey.size() > 0)) {
        return true
    }
    if (channelCfg instanceof Map && channelCfg.containsKey(channel)) {
        return true
    }
    return false
}

/**
 * 增加meta-data数据到AndroidManifest文件
 * @param channel
 * @param releaseDir
 * @param flavorName
 * @param channelKey
 * @param xmlFile
 * @param aXMLEditorJarFile
 * @return
 */
def appendMetaDataToAXml(channel, releaseDir, flavorName, channelKey, xmlFile, aXMLEditorJarFile) {
    println "\n:${project.name}:appendMetaDataToAXml [" + flavorName + "][" + channel + "] >>>>>>>>> Append MetaData to AndroidManifest Start <<<<<<<<<"
    def allChannelKeys = []
    if (channelKey instanceof List) {
        allChannelKeys.addAll(channelKey)
    } else if (channelKey instanceof String) {
        allChannelKeys.add(channelKey)
    }
    // 删除原来meta-data
    allChannelKeys.each {
        def deleteMetaData = "java -jar " + aXMLEditorJarFile + " -tag -r meta-data " + it + " " + xmlFile.getAbsolutePath() + " " + xmlFile.getAbsolutePath()
        println ":${project.name}:appendMetaDataToAXml [" + flavorName + "][" + channel + "] Delete Meta Data"
        println ":${project.name}:appendMetaDataToAXml [" + flavorName + "][" + channel + "] Command [" + optimizeCommand(deleteMetaData) + "]"
        try {
            Process p = deleteMetaData.execute()
            p.waitFor(20, TimeUnit.SECONDS)
            p.destroy();
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
    // 增加新的meta-data
    def tempMetaDataFile = new File(releaseDir, "meta-data-channel.xml")
    FileWriter fileWriter = new FileWriter(tempMetaDataFile, false)
    allChannelKeys.each {
        String channelInfo = String.format(Locale.ENGLISH, "<meta-data android:name=\"%s\" android:value=\"%s\"/>", it, channel)
        println ":${project.name}:appendMetaDataToAXml [" + flavorName + "][" + channel + "] MetaData [" + channelInfo + "]"
        fileWriter.write(channelInfo)
    }
    fileWriter.close()
    def appendMetaData = "java -jar " + aXMLEditorJarFile + " -tag -i " + tempMetaDataFile.getAbsolutePath() + " " + xmlFile.getAbsolutePath() + " " + xmlFile.getAbsolutePath()
    println ":${project.name}:appendMetaDataToAXml [" + flavorName + "][" + channel + "] Append Meta Data"
    println ":${project.name}:appendMetaDataToAXml [" + flavorName + "][" + channel + "] Command [" + optimizeCommand(appendMetaData) + "]"
    try {
        Process p = appendMetaData.execute()
        p.waitFor(20, TimeUnit.SECONDS)
        p.destroy();
    } catch (Exception e) {
        e.printStackTrace()
    }
    tempMetaDataFile.delete()
    println ":${project.name}:appendMetaDataToAXml [" + flavorName + "][" + channel + "] >>>>>>>>> Append MetaData to AndroidManifest Complete <<<<<<<<<\n"
}

/**
 * 修改APP属性，修改方式为查找资源对应的id，然后再AndroidManifest里面进行二进制替换
 * @param channel
 * @param channelApk
 * @param flavorName
 * @param channelCfg
 * @param xmlFile
 * @param aXMLEditorJarFile
 * @return
 */
def modifyAppAttribution(channel, channelApk, flavorName, channelCfg, xmlFile, aXMLEditorJarFile) {
    if (channelCfg == null) {
        println ":${project.name}:modifyAppAttribution [" + flavorName + "][" + channel + "] ChannelCfg is Empty"
        return
    }
    def map = channelCfg[channel]
    if (map == null) {
        println ":${project.name}:modifyAppAttribution [" + flavorName + "][" + channel + "] ChannelMap is Empty"
        return
    }
    def attrNames = ["label", "icon", "roundIcon", "theme"]
    attrNames.each {
        def attrValue = map[it]
        modifyAppAttrResource(attrValue, it, channel, channelApk, flavorName, xmlFile, aXMLEditorJarFile)
    }
}

/**
 * 修改资源属性值
 * @param attrValue
 * @param attrName
 * @param channel
 * @param channelApk
 * @param flavorName
 * @param xmlFile
 * @param aXMLEditorJarFile
 * @return
 */
def modifyAppAttrResource(attrValue, attrName, channel, channelApk, flavorName, xmlFile, aXMLEditorJarFile) {
    println "\n:${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] >>>>>>>>> Modify Attribution Resource Start <<<<<<<<<"
    if (attrValue != null && attrValue.trim().length() > 0) {
        if (attrValue.startsWith("@")) {
            attrValue = attrValue.substring(1)
        }
        println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] Modify " + attrName + " Resource [" + attrValue + "]"
        // 查询资源对应的16进制
        def aaptFile = Global.sAaptFile
        def cmd = aaptFile + " dump resources " + channelApk
        println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] Command [" + optimizeCommand(cmd) + "]"
        def attrResourceId = null
        try {
            def result = cmd.execute().text.trim()
            BufferedReader br = new BufferedReader(new StringReader(result))
            def line = null
            while ((line = br.readLine()) != null) {
                line = line.trim()
                if (line.startsWith("spec resource") && line.indexOf(attrValue) > -1) {
                    println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] Resource [" + line + "]"
                    def split = line.split("\\s+| ")
                    println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] SplitRes " + split
                    attrResourceId = split[2]
                    break;
                }
            }
            br.close()
        } catch (Exception e) {
            e.printStackTrace()
        }
        if (attrResourceId != null && attrResourceId.trim().length() > 0) {
            attrResourceId = attrResourceId.toUpperCase()
            attrResourceId = attrResourceId.replace("0X", "@")
            println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] AttrName [" + attrName + "] , AttrValue [" + attrResourceId + "]"
            def modifyIconString = "java -jar " + aXMLEditorJarFile + " -attr -m application package " + attrName + " " + attrResourceId + " " + xmlFile.getAbsolutePath() + " " + xmlFile.getAbsolutePath()
            println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] Command [" + optimizeCommand(modifyIconString) + "]"
            try {
                Process p = modifyIconString.execute()
                p.waitFor(20, TimeUnit.SECONDS)
                p.destroy();
                println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] Modify Application [" + attrName + "]"
            } catch (Exception e) {
                e.printStackTrace()
            }
        } else {
            println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] Do Not Find [" + attrName + "] ResId : [" + attrValue + "]"
        }
    } else {
        println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] No Need Modify [" + attrName + "] Attr"
    }
    println ":${project.name}:modifyAppAttrResource [" + flavorName + "][" + channel + "] >>>>>>>>> Modify Attribution Resource End <<<<<<<<<\n"
}

/**
 * 解析渠道配置信息
 * @param flavorObj
 * @param outputFile
 * @return
 */
def parseChannelConfig(flavorObj, outputFile) {
    def flavorName = "official"
    def versionName = android.defaultConfig.versionName
    def versionCode = android.defaultConfig.versionCode
    def appName = android.defaultConfig.ext.has("app_name") ? android.defaultConfig.ext.app_name : project.getRootProject().getName()
    def channels = android.defaultConfig.ext.has("app_channels") ? android.defaultConfig.ext.app_channels : []
    def channelCfg = android.defaultConfig.ext.has("channel_cfg") ? android.defaultConfig.ext.channel_cfg : null
    if (flavorObj != null) {
        flavorName = flavorObj.name
        if (flavorObj.versionName != null) {
            versionName = flavorObj.versionName
        }
        if (flavorObj.versionCode != null) {
            versionCode = flavorObj.versionCode
        }
        if (flavorObj.ext != null && flavorObj.ext.has("app_name") && flavorObj.ext.app_name != null) {
            appName = flavorObj.ext.app_name
        }
        if (flavorObj.ext != null && flavorObj.ext.has("app_channels") && flavorObj.ext.app_channels != null) {
            channels = flavorObj.ext.app_channels
        }
        if (flavorObj.ext != null && flavorObj.ext.has("channel_cfg") && flavorObj.ext.channel_cfg != null) {
            channelCfg = flavorObj.ext.channel_cfg
        }
    }
    try {
        if (channels == null || channels.isEmpty()) {
            System.err.println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel " + channels
            return
        }
    } catch (Exception e) {
        return
    }
    channelFileMap.put(flavorName, new HashMap<String, String>())
    def channels_files = channelFileMap[flavorName]
    println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel " + channels
    channels_files["base_package"] = outputFile.getAbsolutePath()
    println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel ========================================"
    channels.each {
        def baseAppName = appName
        if (channelCfg instanceof Map && !channelCfg.isEmpty()) {
            Map map = channelCfg.get(it)
            if (map != null && map.containsKey("app_name")) {
                def app_name = map.get("app_name")
                if (app_name != null && app_name.trim().length() > 0) {
                    baseAppName = app_name
                }
            }
        }
        def tmpFile = baseAppName + "_" + it + "_v" + versionName + "_" + versionCode +
                '_release' + "_" + getDate() + '.apk'
        def releaseDir = outputFile.getParentFile().getAbsolutePath()
        channels_files[it] = new File(releaseDir, tmpFile).getAbsolutePath()
        println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel [" + it + "] : " + new File(channels_files[it]).getName()
    }
    println ":${project.name}:parseChannelConfig [" + flavorName + "] Channel ========================================"
}

def zipAlignApkFile(flavorName, apkFile, channel) {
    def apkName = new File(apkFile).getName()
    def apkDir = new File(apkFile).getParent()
    def alignApkName = apkName.substring(0, apkName.lastIndexOf(".apk")) + "-align.apk"
    println("alignApkName : " + alignApkName)
    println("apkDir : " + apkDir)
    def alignApkFile = new File(apkDir, alignApkName)
    println("alignApkFile : " + alignApkFile)
    println "\n:${project.name}:zipAlignApkFile [" + flavorName + "][" + channel + "] >>>>>>>>> ZipAlign Channel File Start <<<<<<<<<"
    def cmdlist = []
    cmdlist.add(Global.sZipAlignFile)
    cmdlist.add("-f")
    cmdlist.add("4")
    cmdlist.add(apkFile)
    cmdlist.add(alignApkFile.getAbsolutePath())

    def cmdString = cmdlist.join(" ")
    def cmdStringInfo = cmdlist.join(",")
    println ":${project.name}:zipAlignApkFile [" + flavorName + "][" + channel + "] Command [" + optimizeCommand(cmdStringInfo, ",") + "]"
    try {
        def startTime = System.currentTimeMillis()
        Process p = cmdString.execute()
        p.waitFor(20, TimeUnit.SECONDS)
        printOutput(p)
        p.destroy();
        def endTime = System.currentTimeMillis()
        def signTime = (endTime - startTime) / 1000
        println ":${project.name}:zipAlignApkFile [" + flavorName + "][" + channel + "] Command [ZipAlign Apk Use Time " + signTime + "s]"
    } catch (Exception e) {
    }
    println ":${project.name}:zipAlignApkFile [" + flavorName + "][" + channel + "] >>>>>>>>> ZipAlign Channel File Complete <<<<<<<<<\n"
    new File(apkFile).delete()
    alignApkFile.renameTo(apkFile)
}
/**
 * 为渠道包签名
 * @param flavorName
 * @param apkFile
 * @param channel
 * @return
 */
def signChannelApkFile(flavorName, apkFile, channel) {
    println "\n:${project.name}:signChannelApkFile [" + flavorName + "][" + channel + "] >>>>>>>>> Sign Channel File Start <<<<<<<<<"
    def signConfig = getSignConfig(flavorName)
    if (signConfig == null) {
        System.err.println ":${project.name}:signChannelApkFile [" + flavorName + "][" + channel + "] signConfig is Null"
        return
    }
    if (!signConfig.hasProperty("storeFile")
            || !signConfig.hasProperty("storePassword")
            || !signConfig.hasProperty("keyAlias")
            || !signConfig.hasProperty("keyPassword")) {
        System.err.println ":${project.name}:signChannelApkFile [" + flavorName + "][" + channel + "] signConfig is not completion"
        return
    }
    if (deleteApkSignInfo(flavorName, apkFile, channel)) {
        signChannelFileInternal(flavorName, apkFile, signConfig, channel)
    }
    println ":${project.name}:signChannelApkFile [" + flavorName + "][" + channel + "] >>>>>>>>> Sign Channel File Complete <<<<<<<<<\n"
}

/**
 * 删除旧的签名
 * @param flavorName
 * @param apkFile
 * @param channel
 * @return
 */
def deleteApkSignInfo(flavorName, apkFile, channel) {
    def signInfoList = getSignListByAapt(apkFile)
    println ":${project.name} :deleteApkSignInfo [" + flavorName + "][" + channel + "] SignDef " + signInfoList
    if (signInfoList == null || signInfoList.isEmpty()) {
        return true
    }
    deleteFilesFromApk(apkFile, signInfoList)
    return true
}

def forceUse7Zip() {
    if (android.defaultConfig.ext.has("force_use_7zip") && android.defaultConfig.ext["force_use_7zip"]) {
        return true
    }
    return false
}

def get7ZipCmd() {
    def axmlFile = Global.sAxmlEditorFilePath
    def platform = "windows"
    def ext = ".exe"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        platform = "windows"
        ext = ".exe"
    } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        platform = "linux"
        ext = ""
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        platform = "mac"
        ext = ""
    }
    def tempDir = System.getProperty("java.io.tmpdir")
    def fromPath = String.format(Locale.ENGLISH, "7z/%s/7z%s", platform, ext)
    def destPath = new File(tempDir, fromPath).getAbsolutePath()
    def destFile = new File(destPath)
    destFile.getParentFile().mkdirs()
    def exist = destFile.exists()
    println ":${project.name}:get7ZipCmd axmlFile : " + axmlFile
    println ":${project.name}:get7ZipCmd fromPath : " + fromPath
    println ":${project.name}:get7ZipCmd destPath : " + destPath
    println ":${project.name}:get7ZipCmd 7z Exist : " + exist
    if (!exist) {
        def result = copyFileFromZipFile(axmlFile, fromPath, destPath)
        println ":${project.name}:get7ZipCmd Result : " + result
    }
    exist = destFile.exists()
    println ":${project.name}:get7ZipCmd 7z Exist : " + exist
    if (exist) {
        destFile.setExecutable(true, false);
    }
    return destFile.getAbsolutePath()
}

def getAppendCmdListByAapt(apkFile, aaptFile, fileList) {
    def cmd = []
    cmd.add(aaptFile)
    cmd.add("a")
    cmd.add("-v")
    cmd.add(apkFile)
    fileList.each {
        cmd.add(it)
    }
    return cmd
}

def getAppendCmdListBy7z(apkFile, sevenZip, fileList) {
    def cmd = []
    cmd.add(sevenZip)
    cmd.add("a")
    cmd.add("-tzip")
    cmd.add(apkFile)
    fileList.each {
        cmd.add(it)
    }
    return cmd
}
/**
 * 添加文件到apk
 * @param workDir
 * @param apkFile
 * @param fileList
 * @return
 */
def appendFilesIntoApk(workDir, apkFile, fileList) {
    def sevenZip = Global.s7ZipCommandPath
    def aaptFile = Global.sAaptFile
    def forceUse7Zip = forceUse7Zip()
    println ":${project.name}:deleteFilesFromApk forceUse7Zip [" + forceUse7Zip + "]"
    def cmd = []
    if (forceUse7Zip && sevenZip != null && new File(sevenZip).exists()) {
        cmd = getAppendCmdListBy7z(apkFile, sevenZip, fileList)
    } else if (aaptFile != null) {
        cmd = getAppendCmdListByAapt(apkFile, aaptFile, fileList)
    }
    if (cmd == null || cmd.isEmpty()) {
        println ":${project.name}:appendFilesIntoApk Error [cmd is empty]"
        return
    }
    def cmdString = cmd.join(" ")
    println ":${project.name}:appendFilesIntoApk Command [" + optimizeCommand(cmdString) + "]"
    try {
        Process p = cmdString.execute(null, new File(workDir))
        p.waitFor(20, TimeUnit.SECONDS)
        printOutput(p)
        p.closeStreams()
        p.destroy();
    } catch (Exception e) {
        e.printStackTrace()
    }
}

def getDeleteCmdListByAapt(apkFile, aaptFile, fileList) {
    def cmd = []
    cmd.add(aaptFile)
    cmd.add("r")
    cmd.add("-v")
    cmd.add(apkFile)
    fileList.each {
        cmd.add(it)
    }
    return cmd
}

def getDeleteCmdListBy7z(apkFile, sevenZip, fileList) {
    def cmd = []
    cmd.add(sevenZip)
    cmd.add("d")
    cmd.add("-tzip")
    cmd.add(apkFile)
    fileList.each {
        cmd.add(it)
    }
    return cmd
}

/**
 * 从apk中删除文件
 * @param apkFile
 * @param fileList
 * @return
 */
def deleteFilesFromApk(apkFile, fileList) {
    def sevenZip = Global.s7ZipCommandPath
    def aaptFile = Global.sAaptFile
    def forceUse7Zip = forceUse7Zip()
    println ":${project.name}:deleteFilesFromApk forceUse7Zip [" + forceUse7Zip + "]"
    def cmd = []
    if (forceUse7Zip && sevenZip != null && new File(sevenZip).exists()) {
        cmd = getDeleteCmdListBy7z(apkFile, sevenZip, fileList)
    } else if (aaptFile != null) {
        cmd = getDeleteCmdListByAapt(apkFile, aaptFile, fileList)
    }
    if (cmd == null || cmd.isEmpty()) {
        println ":${project.name}:deleteFilesFromApk Error [cmd is empty]"
        return
    }
    def cmdList = cmd.join(" ")
    println ":${project.name}:deleteFilesFromApk Command [" + optimizeCommand(cmdList) + "]"
    try {
        def startTime = System.currentTimeMillis()
        Process p = cmdList.execute()
        p.waitFor(20, TimeUnit.SECONDS)
        p.destroy()
        def endTime = System.currentTimeMillis()
        def signTime = (endTime - startTime) / 1000
        println ":${project.name}:deleteFilesFromApk Command [Delete File From Apk Use Time " + signTime + "s]"
    } catch (Exception e) {
    }
}

/**
 * 读取apk中指定文件的内容
 * @param apkFile
 * @param filePath
 * @return
 */
def readContentFromApk(apkFile, filePath) {
    String content = null;
    try {
        ZipFile zipFile = new ZipFile(apkFile)
        ZipEntry zipEntry = zipFile.getEntry(filePath)
        if (zipEntry != null) {
            InputStream is = zipFile.getInputStream(zipEntry)
            StringBuilder builder = new StringBuilder();
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            is.close();
            content = builder.toString()
        }
        zipFile.close()
    } catch (Exception e) {
        e.printStackTrace()
    }
    return content
}

/**
 * 处理进程输出
 * @param p
 * @return
 */
def printOutput(Process p) {
    println("+++++++++++++++++++++++++++++++++++++++++++")
    try {
        def line = null
        BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream(), "gbk"))
        while ((line = br.readLine()) != null) {
            println(line)
        }
        br.close()
    } catch (Exception e) {
        System.err.println("error : " + e)
    }
    try {
        def line = null
        BufferedReader br = new BufferedReader(new InputStreamReader(p.getErrorStream(), "gbk"))
        while ((line = br.readLine()) != null) {
            println(line)
        }
        br.close()
    } catch (Exception e) {
        System.err.println("error : " + e)
    }
    println("-------------------------------------------")
}

/**
 * 从apk中copy文件
 * @param apkFile
 * @param flavorName
 * @param filePath
 * @param outputPath
 * @param channel
 * @return
 */
def copyManifestFromApk(inputFile, flavorName, String filePath, String outputPath, channel) {
    println ":${project.name}  :copyManifestFromApk [" + flavorName + "][" + channel + "] FromXml [" + filePath + "] to " + "[" + outputPath + "]"
    def copyResult = false;
    try {
        ZipFile zipFile = new ZipFile(inputFile)
        ZipEntry zipEntry = zipFile.getEntry(filePath)
        if (zipEntry != null) {
            InputStream is = zipFile.getInputStream(zipEntry)
            FileOutputStream fos = new FileOutputStream(outputPath)
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                fos.write(buf, 0, read)
            }
            fos.close()
            is.close()
            zipFile.close()
            copyResult = true;
        } else {
            zipFile.close()
        }
    } catch (Exception e) {
        e.printStackTrace()
        copyResult = false;
    }
    return copyResult
}

/**
 * 从apk中copy文件
 * @param inputFile
 * @param flavorName
 * @param filePath
 * @param outputPath
 * @param channel
 * @return
 */
def copyFileFromZipFile(inputFile, String filePath, String outputPath) {
    println ":${project.name}:copyFileFromZipFile From ZipFile [" + inputFile + "] copy [" + filePath + "] to " + "[" + outputPath + "]"
    def copyResult = false;
    try {
        ZipFile zipFile = new ZipFile(inputFile)
        ZipEntry zipEntry = zipFile.getEntry(filePath)
        if (zipEntry != null) {
            InputStream is = zipFile.getInputStream(zipEntry)
            FileOutputStream fos = new FileOutputStream(outputPath)
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                fos.write(buf, 0, read)
            }
            fos.close()
            is.close()
            zipFile.close()
            copyResult = true;
        } else {
            zipFile.close()
        }
    } catch (Exception e) {
        e.printStackTrace()
        copyResult = false;
    }
    return copyResult
}

/**
 * 获取旧的签名文件
 * @param apkFile
 * @param flavorName
 * @param channel
 * @return
 */
def getSignListByAapt(apkFile) {
    def list = []
    try {
        ZipFile zipFile = new ZipFile(apkFile)
        Enumeration<? extends ZipEntry> entries = zipFile.entries()
        while (entries.hasMoreElements()) {
            def name = entries.nextElement().getName()
            if (name != null && name.startsWith("META-INF") && (name.endsWith(".MF") || name.endsWith(".SF") || name.endsWith(".RSA"))) {
                list.add(name)
            }
        }
        zipFile.close()
    } catch (IOException e) {
        e.printStackTrace()
    }
    return list
}

/**
 * 对渠道包签名
 * @param flavorName
 * @param apkFile
 * @param signConfig
 * @param jarSignerFile
 * @param channel
 * @return
 */
def signChannelFileInternal(flavorName, apkFile, signConfig, channel) {
    def jarSignerFile = Global.sJarSignerFile
    if (jarSignerFile == null) {
        System.err.println "> Task :${project.name}:signApkFilePackage jarSignerFile is Null"
        return
    }
    if (signConfig != null
            && signConfig.hasProperty("storeFile")
            && signConfig.hasProperty("storePassword")
            && signConfig.hasProperty("keyAlias")
            && signConfig.hasProperty("keyPassword")) {
        println ":${project.name}:signChannelPackage [" + flavorName + "][" + channel + "] ApkFile [" + apkFile + "]"
        if (!signApkWithApkSigner(flavorName, apkFile, signConfig, channel)) {
            signApkWithJarSigner(flavorName, apkFile, signConfig, channel)
        }
    }
}

def signApkWithJarSigner(flavorName, apkFile, signConfig, channel) {
    if (Global.sJarSignerFile == null || !new File(Global.sJarSignerFile).exists()) {
        System.err.println "> Task :${project.name}:signApkWithJarSigner jarSignerFile is Null"
        return false
    }
    def cmdlist = []
    cmdlist.add(Global.sJarSignerFile)

    cmdlist.add("-digestalg")
    cmdlist.add("SHA1")
    cmdlist.add("-sigalg")
    cmdlist.add("MD5withRSA")
    // cmdlist.add("-tsa https://timestamp.geotrust.com/tsa")
    cmdlist.add("-keystore")
    cmdlist.add(signConfig.storeFile)
    cmdlist.add("-storepass")
    cmdlist.add(signConfig.storePassword)
    cmdlist.add("-keypass")
    cmdlist.add(signConfig.keyPassword)
    cmdlist.add("-signedjar")
    cmdlist.add(apkFile)
    cmdlist.add(apkFile)
    cmdlist.add(signConfig.keyAlias)

    def cmdString = cmdlist.join(" ")
    def cmdStringInfo = cmdlist.join(",")
    println ":${project.name}:signChannelPackage [" + flavorName + "][" + channel + "] Command [" + optimizeCommand(cmdStringInfo, ",") + "]"
    try {
        def startTime = System.currentTimeMillis()
        Process p = cmdString.execute()
        p.waitFor(20, TimeUnit.SECONDS)
        p.destroy();
        def endTime = System.currentTimeMillis()
        def signTime = (endTime - startTime) / 1000
        println ":${project.name}:signChannelPackage [" + flavorName + "][" + channel + "] Command [Sign Apk Use Time " + signTime + "s]"
        return true
    } catch (Exception e) {
    }
    return false
}

def signApkWithApkSigner(flavorName, apkFile, signConfig, channel) {
    if (Global.sApkSignerFile == null || !new File(Global.sApkSignerFile).exists()) {
        System.err.println "> Task :${project.name}:signApkWithApkSigner apkSignerFile is Null"
        return false
    }
    zipAlignApkFile(flavorName, apkFile, channel)
    def cmdlist = []
    cmdlist.add("java")
    cmdlist.add("-jar")
    cmdlist.add(Global.sApkSignerFile)
    cmdlist.add("sign")
    cmdlist.add("--ks")
    cmdlist.add(signConfig.storeFile)
    cmdlist.add("--ks-key-alias")
    cmdlist.add(signConfig.keyAlias)
    cmdlist.add("--ks-pass")
    cmdlist.add("pass:" + signConfig.storePassword)
    cmdlist.add("--key-pass")
    cmdlist.add("pass:" + signConfig.keyPassword)
    cmdlist.add("--out")
    cmdlist.add(apkFile)
    cmdlist.add(apkFile)
    def cmdString = cmdlist.join(" ")
    def cmdStringInfo = cmdlist.join(",")
    println ":${project.name}:signApkWithApkSigner [" + flavorName + "][" + channel + "] Command [" + optimizeCommand(cmdStringInfo, ",") + "]"
    try {
        def startTime = System.currentTimeMillis()
        Process p = cmdString.execute()
        p.waitFor(20, TimeUnit.SECONDS)
        printOutput(p)
        p.destroy();
        def endTime = System.currentTimeMillis()
        def signTime = (endTime - startTime) / 1000
        println ":${project.name}:signApkWithApkSigner [" + flavorName + "][" + channel + "] Command [Sign Apk Use Time " + signTime + "s]"
        return true
    } catch (Exception e) {
    }
    return false
}

/**
 * 获取Jarsigner文件路径
 * @param flavorName
 * @param channel
 * @return
 */
def getJarSigner() {
    def jarSignerFile = null
    try {
        def cmdString = "which jarsigner"
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            cmdString = "where jarsigner"
        }
        def result = cmdString.execute().text.trim()
        if (result != null && result.length() > 0) {
            BufferedReader br = new BufferedReader(new StringReader(result))
            def tmpFile = br.readLine()
            br.close()
            File f = new File(tmpFile)
            if (f.exists()) {
                jarSignerFile = tmpFile
            }
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    return jarSignerFile
}

/**
 * 获取签名信息
 * @param flavor
 * @return
 */
def getSignConfig(flavor) {
    def signConfig = null
    if (flavor != null) {
        try {
            signConfig = project.android.productFlavors[flavor].signingConfig
        } catch (Exception e) {
        }
    }
    if (signConfig == null) {
        try {
            signConfig = project.android.buildTypes.release.signingConfig
        } catch (Exception e) {
        }
    }
    return signConfig
}

/**
 * 优化日志输出
 * @param cmdString
 * @param delimiter
 * @return
 */
def optimizeCommand(cmdString, delimiter = " ") {
    if (android.defaultConfig.ext.has("debug") && android.defaultConfig.ext["debug"]) {
        if (" ".equals(delimiter)) {
            return cmdString
        }
        return cmdString.replaceAll(",", " ")
    }
    try {
        List<String> list = Arrays.asList(cmdString.split(delimiter))
        List<String> list2 = new ArrayList<String>(list.size())
        for (int index = 0; index < list.size(); index++) {
            String s = list.get(index)
            File file = new File(s)
            if (file.exists()) {
                list2.add(file.getName())
            } else {
                list2.add(s)
            }
        }
        return list2.join(" ")
    } catch (Exception e) {
        e.printStackTrace()
    }
    return cmdString
}

/**
 * 获取aapt文件路径
 * @return
 */
def getAaptFile() {
    def sdkDir = null
    try {
        Properties properties = new Properties()
        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
        properties.load(inputStream)
        //读取文件
        sdkDir = properties.getProperty('sdk.dir')
    } catch (Exception e) {
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getAaptFile sdkDir == null, Use ANDROID_SDK_ROOT"
        } else {
            println ":${project.name}:getAaptFile sdkDir is not exist, Use ANDROID_SDK_ROOT"
        }
        sdkDir = System.getenv("ANDROID_SDK_ROOT")
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getAaptFile sdkDir == null, Use ANDROID_HOME"
        } else {
            println ":${project.name}:getAaptFile sdkDir is not exist, Use ANDROID_HOME"
        }
        sdkDir = System.getenv("ANDROID_HOME")
    }
    println ":${project.name}:getAaptFile sdkDir : [" + sdkDir + "]"
    if (sdkDir == null) {
        println ":${project.name}:getAaptFile sdkDir == null"
        return null
    }
    if (!new File(sdkDir).exists()) {
        println ":${project.name}:getAaptFile sdkDir is not exist"
        return null
    }
    def exe = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        exe = ".exe"
    }
    def compileSdkVersion = android.compileSdkVersion
    if (compileSdkVersion != null) {
        compileSdkVersion = compileSdkVersion.replaceAll("android-", "");
    }
    def buildToolDir = sdkDir + File.separator + "build-tools"
    def buildToolVersionDir = android.buildToolsVersion
    if (buildToolVersionDir == null) {
        def buildToolDirs = new File(buildToolDir).list(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.startsWith(String.valueOf(compileSdkVersion))
            }
        })
        if (buildToolDirs != null && buildToolDirs.length > 0) {
            buildToolVersionDir = buildToolDirs[0]
        }
    }
    def aaptFile = buildToolDir + File.separator + buildToolVersionDir + File.separator + "aapt" + exe
    if (!new File(aaptFile).exists()) {
        aaptFile = null
    }
    println ":${project.name}:getAaptFile aaptFile : [" + aaptFile + "]"
    return aaptFile
}

/**
 * 获取aapt文件路径
 * @return
 */
def getZipAlignFile() {
    def sdkDir = null
    try {
        Properties properties = new Properties()
        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
        properties.load(inputStream)
        //读取文件
        sdkDir = properties.getProperty('sdk.dir')
    } catch (Exception e) {
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getZipAlignFile sdkDir == null, Use ANDROID_SDK_ROOT"
        } else {
            println ":${project.name}:getZipAlignFile sdkDir is not exist, Use ANDROID_SDK_ROOT"
        }
        sdkDir = System.getenv("ANDROID_SDK_ROOT")
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getZipAlignFile sdkDir == null, Use ANDROID_HOME"
        } else {
            println ":${project.name}:getZipAlignFile sdkDir is not exist, Use ANDROID_HOME"
        }
        sdkDir = System.getenv("ANDROID_HOME")
    }
    println ":${project.name}:getZipAlignFile sdkDir : [" + sdkDir + "]"
    if (sdkDir == null) {
        println ":${project.name}:getZipAlignFile sdkDir == null"
        return null
    }
    if (!new File(sdkDir).exists()) {
        println ":${project.name}:getZipAlignFile sdkDir is not exist"
        return null
    }
    def exe = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        exe = ".exe"
    }
    def compileSdkVersion = android.compileSdkVersion
    if (compileSdkVersion != null) {
        compileSdkVersion = compileSdkVersion.replaceAll("android-", "");
    }
    def buildToolDir = sdkDir + File.separator + "build-tools"
    def buildToolVersionDir = android.buildToolsVersion
    if (buildToolVersionDir == null) {
        def buildToolDirs = new File(buildToolDir).list(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.startsWith(String.valueOf(compileSdkVersion))
            }
        })
        if (buildToolDirs != null && buildToolDirs.length > 0) {
            buildToolVersionDir = buildToolDirs[0]
        }
    }
    def zipAlignFile = buildToolDir + File.separator + buildToolVersionDir + File.separator + "zipalign" + exe
    if (!new File(zipAlignFile).exists()) {
        zipAlignFile = null
    }
    println ":${project.name}:getZipAlignFile zipAlignFile : [" + zipAlignFile + "]"
    return zipAlignFile
}

/**
 * 获取aapt文件路径
 * @return
 */
def getApkSigner() {
    def sdkDir = null
    try {
        Properties properties = new Properties()
        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
        properties.load(inputStream)
        //读取文件
        sdkDir = properties.getProperty('sdk.dir')
    } catch (Exception e) {
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getApkSigner sdkDir == null, Use ANDROID_SDK_ROOT"
        } else {
            println ":${project.name}:getApkSigner sdkDir is not exist, Use ANDROID_SDK_ROOT"
        }
        sdkDir = System.getenv("ANDROID_SDK_ROOT")
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getApkSigner sdkDir == null, Use ANDROID_HOME"
        } else {
            println ":${project.name}:getApkSigner sdkDir is not exist, Use ANDROID_HOME"
        }
        sdkDir = System.getenv("ANDROID_HOME")
    }
    println ":${project.name}:getApkSigner sdkDir : [" + sdkDir + "]"
    if (sdkDir == null) {
        println ":${project.name}:getApkSigner sdkDir == null"
        return null
    }
    if (!new File(sdkDir).exists()) {
        println ":${project.name}:getApkSigner sdkDir is not exist"
        return null
    }
    def compileSdkVersion = android.compileSdkVersion
    if (compileSdkVersion != null) {
        compileSdkVersion = compileSdkVersion.replaceAll("android-", "");
    }
    def buildToolDir = sdkDir + File.separator + "build-tools"
    def buildToolVersionDir = android.buildToolsVersion
    if (buildToolVersionDir == null) {
        def buildToolDirs = new File(buildToolDir).list(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.startsWith(String.valueOf(compileSdkVersion))
            }
        })
        if (buildToolDirs != null && buildToolDirs.length > 0) {
            buildToolVersionDir = buildToolDirs[0]
        }
    }
    def apkSigner = buildToolDir + File.separator + buildToolVersionDir + File.separator + "lib" + File.separator + "apksigner.jar"
    if (!new File(apkSigner).exists()) {
        apkSigner = null
    }
    println ":${project.name}:getApkSigner apkSigner : [" + apkSigner + "]"
    return apkSigner
}
/**
 * 获取axmleditor文件路径
 * @param flavorName
 * @param channel
 * @return
 */
def getAXMLEditJarFile() {
    def rootDir = getRootDir()
    def aXmlEditJarFile = new File(rootDir, "AXMLEditor.jar")
    if (aXmlEditJarFile.exists()) {
        return aXmlEditJarFile.getAbsolutePath()
    } else {
        System.err.println ":${project.name}:getAXMLEditJarFile Can not find AXMLEditor.jar in [" + rootDir + "]"
    }
    aXmlEditJarFile = project.configurations.compileOnly*.toURI().find {
        URI uri ->
            new File(uri).name == getAxmlFileName()
    }
    if (aXmlEditJarFile != null && new File(aXmlEditJarFile).exists()) {
        println ":${project.name}:getAXMLEditJarFile aXmlEditJarFile : [" + aXmlEditJarFile + "]"
        return new File(aXmlEditJarFile).getAbsolutePath()
    } else {
        System.err.println ":${project.name}:getAXMLEditJarFile Can not find dependencies [compileOnly '" + getAxmlImplementation() + "] in app.dependencies"
    }
    return null
}

/**
 * 首字母转大写
 * @param s
 * @return
 */
def toUpperCaseFirstOne(String s) {
    if (s == null) {
        return null
    }
    if (Character.isUpperCase(s.charAt(0))) {
        return s;
    }
    return (new StringBuilder()).append(Character.toUpperCase(s.charAt(0))).append(s.substring(1)).toString();
}

/**
 * 打开输出目录
 * @param flavor
 * @return
 */
def openReleaseDir(flavor) {
    if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        return
    }
    try {
        def outputDir = String.format("outputs/apk/%srelease", ((flavor != null && flavor.trim().length() > 0) ? flavor + "/" : ""))
        def outputPath = new File(project.buildDir, outputDir)
        def cmd = "explorer.exe " + outputPath
        println ":${project.name}:openReleaseDir [${outputPath}]"
        cmd.execute()
    } catch (Exception e) {
        e.printStackTrace()
    }
}

class AesManager {
    private static void appendHex(StringBuffer paramStringBuffer, byte paramByte) {
        paramStringBuffer.append(
                "0123456789ABCDEF".charAt(0xF & paramByte >> 4)).append(
                "0123456789ABCDEF".charAt(paramByte & 0xF));
    }

    static String decrypt(String key, String content) {
        try {
            String str = new String(decrypt(getRawKey(key.getBytes()),
                    toByte(content)));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt error: " + localException);
        }
        return null;
    }

    static byte[] decrypt(byte[] key,
                          byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(2, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static String decryptRaw(String seed, byte[] content) {
        try {
            String str = new String(
                    decrypt(getRawKey(seed.getBytes()), content));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt raw error: " + localException);
        }
        return null;
    }

    static String encryptPublic(String key, String content) {
        try {
            byte[] result = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return toHex(result);
        } catch (Exception localException) {
        }
        return null;
    }

    private static byte[] encrypt(byte[] key,
                                  byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(1, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static byte[] encryptRaw(String key, String content) {
        try {
            byte[] arrayOfByte = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return arrayOfByte;
        } catch (Exception localException) {
            System.out.println("encrypt raw error: " + localException);
        }
        return null;
    }

    static String fromHex(String content) {
        return new String(toByte(content));
    }

    private static byte[] getRawKey(byte[] key) throws Exception {
        byte[] arrayOfByte = new byte[16];
        if (key == null)
            throw new IllegalArgumentException("seed == null");
        if (key.length == 0)
            throw new IllegalArgumentException("seed.length == 0");
        if (key.length < 16) {
            int i = 0;
            while (i < arrayOfByte.length) {
                if (i < key.length) {
                    arrayOfByte[i] = key[i];
                } else {
                    arrayOfByte[i] = 0;
                }
                i++;
            }
        }
        return arrayOfByte;
    }

    static byte[] toByte(String content) {
        int i = content.length() / 2;
        byte[] arrayOfByte = new byte[i];
        for (int j = 0; j < i; j++)
            arrayOfByte[j] = Integer.valueOf(
                    content.substring(j * 2, 2 + j * 2), 16).byteValue();
        return arrayOfByte;
    }

    static String toHex(String content) {
        return toHex(content.getBytes());
    }

    static String toHex(byte[] content) {
        if (content == null)
            return "";
        StringBuffer localStringBuffer = new StringBuffer(
                2 * content.length);
        for (int i = 0; i < content.length; i++)
            appendHex(localStringBuffer, content[i]);
        return localStringBuffer.toString();
    }

    private static String readFromFile(File f) {
        if (!f.exists()) {
            return null;
        }
        StringBuilder builder = new StringBuilder();
        try {
            byte[] buf = new byte[4096];
            int read = 0;
            FileInputStream fis = new FileInputStream(f);
            while ((read = fis.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            fis.close();
            return builder.toString();
        } catch (Exception e) {
        }
        return null;
    }

    private static void writeToFile(File f, String out) {
        try {
            if (f.exists()) {
                f.delete();
            }
            f.createNewFile();
            FileOutputStream fos = new FileOutputStream(f);
            fos.write(out.getBytes());
            fos.close();
        } catch (Exception e) {
        }
    }

    private static void usage() {
        String usage = "java -jar aes.jar <-k rawkey> [-e/-d] [-i input] [-o output] [-s str]";
        System.out.println(usage);
    }

    private static boolean isEmpty(String str) {
        if (str == null || str.trim().equals("")) {
            return true;
        }
        return false;
    }

    static String readFromStream(InputStream is) {
        if (is == null) {
            return null;
        }
        try {
            StringBuilder builder = new StringBuilder();
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            is.close();
            return builder.toString();
        } catch (Exception e) {
            e.printStackTrace()
        }
        return null;
    }

    static String readLocal(String filePath) {
        try {
            InputStream is = new FileInputStream(filePath);
            return readFromStream(is);
        } catch (Exception e) {
        }
        return null;
    }

    static boolean isJson(String file) {
        try {
            String s = readLocal(file)
            if (s != null) {
                s = s.trim()
            }
            if (s.startsWith("[") || s.startsWith("{")) {
                return true
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
        return false
    }

    static void encryptFile(String originFile, String secret) {
        try {
            String encrypt = encryptPublic(secret, readFromFile(new File(originFile))); //加密
            writeToFile(new File(originFile), encrypt);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static String byte2MD5(byte[] byteArray) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
        byte[] md5Bytes = md5.digest(byteArray);
        StringBuffer hexValue = new StringBuffer();
        for (int i = 0; i < md5Bytes.length; i++) {
            int val = md5Bytes[i] & 0xff;
            if (val < 16) {
                hexValue.append("0");
            }
            hexValue.append(Integer.toHexString(val));
        }
        return hexValue.toString();
    }

    static String string2MD5(String source) {
        return string2MD5(source, "utf-8");
    }

    static String string2MD5(String source, String encode) {
        try {
            return byte2MD5(source.getBytes(encode));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }
}